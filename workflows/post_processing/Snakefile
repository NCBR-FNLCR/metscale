'''
Author: Chris Grahlmann
Affiliation: Signature Science

Date: 2019-05-01
Documentation: docs/workflow_comparison.md
'''

from os.path import join
import  glob

##################################################
# Post processing rules

data_dir = config['data_dir']
biocontainers = config['biocontainers']
taxclass = config['taxonomic_classification']
assembly = config['assembly']
readfilt = config['read_filtering']
comparison = config['comparison']
post_processing = config['post_processing']


##################################################
# Post processing build rules

# Skip to the very end of the file 
# to see the high-level build rules
# that trigger cascades of workflow
# tasks.


##################################################


#We need to get the files if they have been moved to the completed dir.
output_dir_pattern = post_processing['move_samples_to_dir']['output_pattern']
file_ext = readfilt['quality_trimming']['sample_file_ext']

workflows = config['workflows']
#TODO: Test What if we have multiple samples?
sample_files_dir_mv = []
for sample in all_sample_names:
    input_file_pattern = readfilt['read_patterns']['pre_trimming_glob_pattern']
    input_file_pattern = input_file_pattern.replace(file_ext,'')
    sample_file = re.sub(r"\*", sample, input_file_pattern, 1)
    finished_dir = output_dir_pattern.replace("{sample}", sample_file)
    finished_dir = join(data_dir, finished_dir)
    if ('*' in sample_file) or ('?' in sample_file):
        finished_dir = glob.glob(finished_dir)[0]
    if os.path.isdir(finished_dir):
        sample_files_dir_mv.append(finished_dir)


##########################################################

samples_output_dir = join(data_dir, output_dir_pattern)


def get_input_files(wildcards):
    input_files = []
    sample_input = wildcards
    search_pattern = readfilt["read_patterns"]["reverse_pe_pattern_search"]
    replace_pattern = readfilt["read_patterns"]["reverse_pe_pattern_replace"]

    #forward string pattern
    input_file_pattern1 = join(data_dir,"{sample}*")
    input_file_pattern = expand(input_file_pattern1, sample = sample_input)
    input_files.extend(glob.glob(str(input_file_pattern[0])))

    #reverse string pattern
    input_rev_str = str(sample_input).replace(search_pattern, replace_pattern)
    input_rev_str_pattern = join(data_dir,input_rev_str)
    input_rev_str_pattern = input_rev_str_pattern+"*"
    input_files.extend(glob.glob(input_rev_str_pattern))
    return input_files


rule move_samples_to_dir:
    '''
    move files to seperate dir after processing
    '''
    output:
        directory(samples_output_dir)
    params:
        output_dir = samples_output_dir,
        input_files = get_input_files
    message: 
        '--- Moving files to samples dir'
    shell:
        "post_processing/move_completed_files.sh {params.output_dir} {params.input_files}"


##################################################
# post processing: create the final HTML report



def get_sample_filenames(wildcards):
    input_file_pattern = readfilt['read_patterns']['pre_trimming_glob_pattern']
    input_file_pattern = input_file_pattern.replace(file_ext,'')
    sample_file = re.sub(r"\*", sample, input_file_pattern, 1)
    sample_file = re.sub(r"\*", r".+", sample_file)
    return sample_file


def get_sample_dir(wildcards):
    a = wildcards.sample_mv
    path = os.getcwd() + "/" + a
    return path


html_output_file = post_processing['move_samples_to_dir']['out_pattern']

rule generate_r_script:
    '''
    generate R script for final reports
    '''
    output:
        html_output_file
    params:
        input_dir = get_sample_dir,  
        input_files = get_sample_filenames
    script:
        "summary-report.Rmd"

 

 ###################################
# Post Processing: build rules      



rule post_processing_move_samples_dir_workflow:
    '''
    Build rule: Move all output files to subdir
    '''
    input:
        expand( samples_output_dir,
                sample    = sample_input_files,
        )


rule post_processing_create_final_report_workflow:
    '''
    Build rule: Create a final HTML report
    '''
    input:
        expand( html_output_file,
                sample_mv    = sample_files_dir_mv,
        )