'''
Author: Phillip Brooks, Charles Reid
Affiliation: UC Davis Lab for Data Intensive Biology

Date: 2019-04-01
Documentation: docs/workflow_comparison.md
'''

from common.utils  import container_image_is_external, container_image_name
from os.path import join, isfile, dirname
import os, re, glob
from snakemake.remote.HTTP import RemoteProvider as HTTPRemoteProvider
HTTP = HTTPRemoteProvider()




##################################################
# Post processing rules

data_dir = config['data_dir']
biocontainers = config['biocontainers']
taxclass = config['taxonomic_classification']
assembly = config['assembly']
readfilt = config['read_filtering']
comparison = config['comparison']
post_processing = config['post_processing']


##################################################
# Post processing build rules

# Skip to the very end of the file 
# to see the high-level build rules
# that trigger cascades of workflow
# tasks.


##################################################


output_dir_pattern = post_processing['move_samples_to_dir']['output_pattern']
out_dir_sample = workflows['samples_input_workflow']['samples']
output_dir = expand(output_dir_pattern, sample=out_dir_sample)[0]
output_dir = join(data_dir, output_dir)


def get_input_files(wildcards):
    input_files = []
    sample_input = wildcards
    search_pattern = readfilt["read_patterns"]["reverse_pe_pattern_search"]
    replace_pattern = readfilt["read_patterns"]["reverse_pe_pattern_replace"]

    #forward string pattern
    input_file_pattern1 = join(data_dir,"{sample}*")
    input_file_pattern = expand(input_file_pattern1, sample = sample_input)
    input_files.extend(glob.glob(str(input_file_pattern[0])))

    #reverse string pattern
    input_rev_str = str(sample_input).replace(search_pattern, replace_pattern)
    input_rev_str_pattern = join(data_dir,input_rev_str)
    input_rev_str_pattern = input_rev_str_pattern+"*"
    input_files.extend(glob.glob(input_rev_str_pattern))
    return input_files


rule move_samples_to_dir_workflow:
    '''
    move files to seperate dir after processing
    '''
    input:
        get_input_files
    output:
        directory(output_dir)
    params:
        output_dir = output_dir
    message: 
        '--- Moving files to samples dir'
    shell:
        "post_processing/move_completed_files.sh {params.output_dir} {input}"





rule post_processing_move_samples_dir_workflow:
    '''
    Build rule: Take forward and reversed trimmed reads and run interleave-reads
    '''
    input:
        expand( output_dir,
                sample    = sample_input_files,
            )