'''
Author: Phillip Brooks, Charles Reid
Affiliation: UC Davis Lab for Data Intensive Biology
Objective: Use sourmash to compute MinHash signatures and compare the Jaccard
similarity of MinHash signatures.
Date: 2018-06-14
Documentation: docs/workflow_comparison.md
'''

from common.utils  import container_image_is_external, container_image_name
from os.path import join, isfile, dirname
import os, re
from snakemake.remote.HTTP import RemoteProvider as HTTPRemoteProvider
HTTP = HTTPRemoteProvider()


# https://github.com/dahak-metagenomics/dahak/tree/master/workflows/comparison


##################################################
# Comparison: default config

data_dir = config['data_dir']
biocontainers = config['biocontainers']
taxclass = config['taxonomic_classification']
assembly = config['assembly']
readfilt = config['read_filtering']
comparison = config['comparison']


##################################################
# Comparison: build rules

# Skip to the very end of the file 
# to see the high-level build rules
# that trigger cascades of workflow
# tasks.


##################################################
# Comparison: compute read signatures

# input is fwd/rev reads
read_sig_input_fwd = join(data_dir, readfilt['read_patterns']['post_trimming_pattern'].format(
                                sample = '{sample}',
                                qual = '{qual}',
                                direction = readfilt['direction_labels']['forward']))
read_sig_input_rev = join(data_dir, readfilt['read_patterns']['post_trimming_pattern'].format(
                                sample = '{sample}',
                                qual = '{qual}',
                                direction = readfilt['direction_labels']['reverse']))
compute_read_sig_inputs  = [read_sig_input_fwd,
                    read_sig_input_rev]

read_sig_input_fwd_sing = join(sing_dir, readfilt['read_patterns']['post_trimming_pattern'].format(
                                sample = '{sample}',
                                qual = '{qual}',
                                direction = readfilt['direction_labels']['forward']))
read_sig_input_rev_sing = join(sing_dir, readfilt['read_patterns']['post_trimming_pattern'].format(
                                sample = '{sample}',
                                qual = '{qual}',
                                direction = readfilt['direction_labels']['reverse']))


# signature file output replaces .fq.gz with sig_suffix variable
# (also remove direction)
read_base_output_name = re.sub('_{direction}', '', 
                        readfilt['read_patterns']['post_trimming_pattern'])
compute_read_sig_output_name = re.sub(r'.fq.gz',  comparison['compute_read_signatures']['sig_suffix'], read_base_output_name)

#TODO: Have kvalues in both workflowconfig and workflowparams. Because of this.
read_sig_kvalues_string = '_'.join(map(str,comparison['compute_read_signatures']['kvalues'])) 
compute_read_sig_output_name = compute_read_sig_output_name.format(
                                sample = '{sample}',
                                qual = '{qual}',
                                kvalues = read_sig_kvalues_string,
                                scale = comparison['compute_read_signatures']['scale'])


compute_read_sig_output = join(data_dir, compute_read_sig_output_name)
read_sig_output_sing = join(sing_dir, compute_read_sig_output_name)



read_base_merge_output_name = re.sub(r'\.fq\.gz',
                              comparison['compute_read_signatures']['merge_suffix'],
                              read_base_output_name)
read_merge_output = join(sing_dir, read_base_merge_output_name.format(
                                sample = '{sample}',
                                qual = '{qual}',
                                kvalues = read_sig_kvalues_string,
                                scale = comparison['compute_read_signatures']['scale']))




# scale, for command line
read_sig_scale = "%s"%(comparison['compute_read_signatures']['scale'])
#TODO: Have kvalues in both workflowconfig and workflowparams. Because of this.
read_sig_kvalues_cmd = ",".join([str(j) for j in comparison['compute_read_signatures']['kvalues']])

sourmash_compute_image = container_image_name(biocontainers, 'sourmash')


def compute_read_signatures_sig_name(wildcards):
    return read_sig_output_sing.format(**wildcards)

def compute_read_signatures_merge_name(wildcards):
    return read_merge_output.format(**wildcards)

def compute_signature_inputs_fwd(wildcards):
    return read_sig_input_fwd_sing.format(**wildcards)

def compute_signature_inputs_rev(wildcards):
    return read_sig_input_rev_sing.format(**wildcards)


rule compute_read_signatures:
    """
    Compute read signatures from trimmed data using sourmash.
    """
    input:
        compute_read_sig_inputs
    output:
        compute_read_sig_output
    singularity:
        sourmash_compute_image
    params:
        read_sig_name = compute_read_signatures_sig_name,
        read_merge_name = compute_read_signatures_merge_name,
        read_sig_inputs_sing_fwd = compute_signature_inputs_fwd,
        read_sig_inputs_sing_rev = compute_signature_inputs_rev
    shell:
        'sourmash compute '
        '--merge /{params.read_merge_name} '
        '--track-abundance '
        '--scaled {read_sig_scale} '
        '-k {read_sig_kvalues_cmd} '
        '/{params.read_sig_inputs_sing_fwd} '
        '/{params.read_sig_inputs_sing_rev} '
        '-o /{params.read_sig_name}'



##################################################
# Comparison: compute signatures for assemblies


# input is the output of the assembly workflow
#assembly_sig_input_prefix = re.sub('.contigs.fa','',assembly['assembly_patterns']['assembly_pattern'])
assembly_sig_input = join(data_dir, assembly['assembly_patterns']['assembly_pattern'])
assembly_sig_input_sing = join(sing_dir, assembly['assembly_patterns']['assembly_pattern'])

# output replaces .contigs.fa with sig_suffix variable
assembly_sig_output_name = re.sub(r'\.contigs\.fa',
                                  comparison['compute_assembly_signatures']['sig_suffix'],
                                  assembly['assembly_patterns']['assembly_pattern'])
#TODO: Have kvalues in both workflowconfig and workflowparams. Because of this.
assembly_sig_kvalues_string = '_'.join(map(str,comparison['compute_assembly_signatures']['kvalues'])) 
assembly_sig_output_name = assembly_sig_output_name.format(
                                sample = '{sample}',
                                qual = '{qual}',
                                assembler = '{assembler}',
                                kvalues = assembly_sig_kvalues_string,
                                scale = comparison['compute_assembly_signatures']['scale'])

assembly_sig_output = join(data_dir, assembly_sig_output_name)
assembly_sig_output_sing = join(sing_dir, assembly_sig_output_name)

## scale, for command line
assembly_sig_scale = "%s"%(comparison['compute_assembly_signatures']['scale'])
# likewise, get separate k values for assembly and read signatures
assembly_sig_kvalues_cmd = ",".join([str(j) for j in comparison['compute_assembly_signatures']['kvalues']])

sourmash_compute_image = container_image_name(biocontainers, 'sourmash')


rule compute_assembly_signatures:
    """
    Compute assembly signatures using sourmash.
    """
    input:
        assembly_sig_input
    output:
        assembly_sig_output
    params:
        input_files = assembly_sig_input_sing,
        output_files = assembly_sig_output_sing
    singularity:
        sourmash_compute_image
    shell:
        'sourmash compute '
        '-k {assembly_sig_kvalues_cmd} '
        '--scaled {assembly_sig_scale} '
        '/{params.input_files} '
        '-o /{params.output_files} '


##################################################
# Comparison: compare read signatures

# We need to use expand() to create a list of 
# read signature files (the input files)

compare_read_sigs_input_names = expand( 
                compute_read_sig_output_name,
                sample    = sample_input_files,
                qual   = comparison['compute_read_signatures']['qual'])

# Turn filename X into data/X
compare_read_sigs_inputs = [join(data_dir,k) for k in compare_read_sigs_input_names]
compare_read_sigs_inputs_sing = [join(sing_dir,k) for k in compare_read_sigs_input_names]

# User specifies CSV output file.
compare_read_sigs_output_name = comparison['compare_read_signatures']['csv_out']
read_sig_qual_string = 'and'.join(map(str,comparison['compute_read_signatures']['qual'])) 
compare_read_sigs_output_name = expand(compare_read_sigs_output_name,
                                sample    = sample_input_files,
                                qual = read_sig_qual_string,
                                kvalue_read = '{kvalue_read}')

compare_read_sigs_output = [join(data_dir, file) for file in compare_read_sigs_output_name]
compare_read_sigs_output_sing = [join(sing_dir, file) for file in compare_read_sigs_output_name]

sourmash_compare_image = container_image_name(biocontainers, 'sourmash_compare')

def compare_read_sigs_output_wc(wildcards):
    """
    Perform wildcard substitution for the output file name
    """
    out_wc = []
    for file in compare_read_sigs_output_sing:
        out_wc.append(file.format(**wildcards))
    return out_wc

def compare_read_sigs_inputs_wc(wildcards):
    """
    For each input file name, perform wildcard subs,
    add absolute container path, and join all input
    file names together into a single string.
    """
    in_wc = [x.format(**wildcards) for x in compare_read_sigs_inputs_sing]
    in_wc = ["/%s"%(x) for x in in_wc]
    in_wc = " ".join(in_wc)
    return in_wc


rule compare_read_signatures:
    """
    Compare signatures of specified reads.
    """
    input:
        compare_read_sigs_inputs
    output:
        compare_read_sigs_output
    singularity:
        sourmash_compare_image
    params:
        compare_reads_input_wc = compare_read_sigs_inputs_wc,
        compare_reads_output_wc = compare_read_sigs_output_wc
    shell:
        'sourmash compare '
        '{params.compare_reads_input_wc} '
        '-k {wildcards.kvalue_read} '
        '--csv /{params.compare_reads_output_wc}'


##################################################
# Comparison: compare assembly signatures

# We already have the assembly sig name
compare_assembly_sigs_input_names = expand(
            assembly_sig_output_name,
            sample    = sample_input_files,
            qual      = comparison['compute_assembly_signatures']['qual'],
            assembler = comparison['compare_assembly_signatures']['assembler'])

# Turn filename X into data/assembly/X
compare_assembly_sigs_inputs = [join(data_dir, k) for k in compare_assembly_sigs_input_names]
compare_assembly_sigs_inputs_sing = [join(sing_dir, k) for k in compare_assembly_sigs_input_names]

# User specifies CSV output file.
compare_assembly_sigs_output_name = comparison['compare_assembly_signatures']['csv_out']
compare_assembly_qual_string = 'and'.join(map(str,comparison['compute_assembly_signatures']['qual'])) 
compare_assembly_sigs_output_name = expand(compare_assembly_sigs_output_name,
                                    sample    = sample_input_files,
                                    qual = compare_assembly_qual_string,
                                    kvalue_assembly = '{kvalue_assembly}')


compare_assembly_sigs_output = [join(data_dir, file) for file in compare_assembly_sigs_output_name]
compare_assembly_sigs_output_sing = [join(sing_dir, file) for file in compare_assembly_sigs_output_name]


def compare_assembly_sigs_output_wc(wildcards):
    """
    Perform wildcard substitution for the output file name
    """
    out_wc = []
    for file in compare_assembly_sigs_output_sing:
        out_wc.append(file.format(**wildcards))
    return out_wc

def compare_assembly_sigs_inputs_wc(wildcards):
    """
    For each input file name, perform wildcard subs,
    add absolute container path, and join all input
    file names together into a single string.
    """
    in_wc = [x.format(**wildcards) for x in compare_assembly_sigs_inputs_sing]
    in_wc = ["/%s"%(x) for x in in_wc]
    in_wc = " ".join(in_wc)
    return in_wc

rule compare_assembly_signatures:
    """
    Compare different assembly signatures using sourmash.
    """
    input:
        compare_assembly_sigs_inputs
    output:
        compare_assembly_sigs_output
    singularity:
        sourmash_compare_image
    params:
        compare_assembly_inputs_wc = compare_assembly_sigs_inputs_wc,
        compare_assembly_output_wc = compare_assembly_sigs_output_wc
    shell:
        'sourmash compare '
        '{params.compare_assembly_inputs_wc} '
        '-k {wildcards.kvalue_assembly} '
        '--csv /{params.compare_assembly_output_wc}'


##################################################
# Comparison: compare signatures for reads and assemblies

compare_ra_assembly_sigs_input_names = expand(
            assembly_sig_output_name,
            sample    = sample_input_files,
            qual      = comparison['compute_assembly_signatures']['qual'],
            assembler = comparison['compare_assembly_signatures']['assembler']
)
compare_ra_read_sigs_input_names = expand(
            compute_read_sig_output_name,
            sample    = sample_input_files,
            qual   = comparison['compute_read_signatures']['qual']
)
compare_ra_sigs_inputs =  [join(data_dir, file) for file in compare_ra_read_sigs_input_names]
compare_ra_sigs_inputs += [join(data_dir, file) for file in compare_ra_assembly_sigs_input_names]
compare_ra_sigs_inputs_sing =  [join(sing_dir, file) for file in compare_ra_read_sigs_input_names]
compare_ra_sigs_inputs_sing += [join(sing_dir, file) for file in compare_ra_assembly_sigs_input_names]

# User specifies CSV output file.
compare_ra_sigs_output_name = comparison['compare_read_assembly_signatures']['csv_out']
ra_samples_string = 'and'.join(map(str,sample    = sample_input_files, + sample    = sample_input_files,)) 
compare_ra_sigs_output_name = expand(compare_ra_sigs_output_name,
                                sample = ra_samples_string,
                                kvalue_read_assembly = '{kvalue_read_assembly}')

compare_ra_sigs_output = [join(data_dir, file) for file in compare_ra_sigs_output_name]
compare_ra_sigs_output_sing = [join(sing_dir, file) for file in compare_ra_sigs_output_name]

def compare_ra_sigs_output_wc(wildcards):
    """
    Perform wildcard substitution for the output file name
    """
    out_wc = []
    for file in compare_ra_sigs_output_sing:
        out_wc.append(file.format(**wildcards))
    return out_wc

def compare_ra_sigs_inputs_wc(wildcards):
    """
    For each input file name, perform wildcard subs,
    add absolute container path, and join all input
    file names together into a single string.
    """
    in_wc = [x.format(**wildcards) for x in compare_ra_sigs_inputs_sing]
    in_wc = ["/%s"%(x) for x in in_wc]
    in_wc = " ".join(in_wc)
    return in_wc


rule compare_read_assembly_signatures:
    """
    Compare signatures of reads and assembly files.
    """
    input:
        compare_ra_sigs_inputs
    output:
        compare_ra_sigs_output
    singularity:
        sourmash_compare_image
    params:
        compare_ra_inputs_wc = compare_ra_sigs_inputs_wc,
        compare_ra_output_wc = compare_ra_sigs_output_wc
    shell:
        'sourmash compare '
        '{params.compare_ra_inputs_wc} '
        '-k {wildcards.kvalue_read_assembly} '
        '--csv /{params.compare_ra_output_wc}'


##################################################
# Comparison: create heatmap plots for read assembly csv files


compare_csv_files_ra = compare_ra_sigs_output
compare_heatmap_plots_output_ra = os.path.splitext(compare_csv_files_ra[0])[0]+'.png'

rule create_jaccard_heatmap_plots_ra:
    """
    create heatmap plots of CSV outs
    """
    input:
        compare_csv_files_ra
    output:
        compare_heatmap_plots_output_ra
    script:
        'JaccardIndexHeatmapPlt.R'


##################################################
# Comparison: create heatmap plots for reads csv files


compare_csv_files_reads = compare_read_sigs_output
compare_heatmap_plots_output_reads = os.path.splitext(compare_csv_files_reads[0])[0]+'.png'

rule create_jaccard_heatmap_plots_reads:
    """
    create heatmap plots of CSV outs
    """
    input:
        compare_csv_files_reads
    output:
        compare_heatmap_plots_output_reads
    script:
        'JaccardIndexHeatmapPlt.R'

##################################################
# Comparison: create heatmap plots for assembly csv files


compare_csv_files_assembly = compare_assembly_sigs_output
compare_heatmap_plots_output_assembly = os.path.splitext(compare_csv_files_assembly[0])[0]+'.png'

rule create_jaccard_heatmap_plots_assembly:
    """
    create heatmap plots of CSV outs
    """
    input:
        compare_csv_files_assembly
    output:
        compare_heatmap_plots_output_assembly
    script:
        'JaccardIndexHeatmapPlt.R'



###################################
# Comparison: build rules

workflows = config['workflows']

rule comparison_reads_workflow:
    """
    Build rule: run sourmash compare on all reads
    """
    input:
        expand( compare_read_sigs_output,
                kvalue_read = workflows['comparison_reads_workflow']['kvalue']
       )


rule comparison_assembly_workflow:
    """
    Build rule: run sourmash compare on all assemblies
    """
    input:
        expand( compare_assembly_sigs_output,
                kvalue_assembly = workflows['comparison_assembly_workflow']['kvalue']
        )

rule comparison_reads_assembly_workflow:
    """
    Build rule: run sourmash compare on all reads and assemblies together
    """
    input:
        expand( compare_ra_sigs_output,
                kvalue_read_assembly = workflows['comparison_reads_assembly_workflow']['kvalue']
        )


rule comparison_output_heatmap_plots_reads_assembly_workflow:
    """
    Build rule: create jaccard heat maps for read assembly CSV files
    """
    input:
        expand( compare_heatmap_plots_output_ra,
            kvalue_read_assembly = workflows['comparison_reads_assembly_workflow']['kvalue']
    )


rule comparison_output_heatmap_plots_reads_workflow:
    """
    Build rule: create jaccard heat maps for reads CSV files
    """
    input:
        expand( compare_heatmap_plots_output_reads,
            kvalue_read = workflows['comparison_reads_workflow']['kvalue']
    )


rule comparison_output_heatmap_plots_assembly_workflow:
    """
    Build rule: create jaccard heat maps for assembly CSV files
    """
    input:
        expand( compare_heatmap_plots_output_assembly,
            kvalue_assembly = workflows['comparison_assembly_workflow']['kvalue']
    )

rule comparison_output_heatmap_plots_all_workflow:
    """
    Build rule: create jaccard heat maps for all CSV files
    """
    input:
        expand( compare_heatmap_plots_output_assembly,
            kvalue_assembly = workflows['comparison_assembly_workflow']['kvalue']
        ),
        expand( compare_heatmap_plots_output_reads,
            kvalue_read = workflows['comparison_reads_workflow']['kvalue']
        ),
        expand( compare_heatmap_plots_output_ra,
            kvalue_read_assembly = workflows['comparison_reads_assembly_workflow']['kvalue']
        )
