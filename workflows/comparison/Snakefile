'''
Author: Phillip Brooks, Charles Reid
Affiliation: UC Davis Lab for Data Intensive Biology
Objective: Use sourmash to compute MinHash signatures and compare the Jaccard
similarity of MinHash signatures.
Date: 2018-06-14
Documentation: docs/workflow_comparison.md
'''

from utils import container_image_is_external, container_image_name
from os.path import join, isfile, dirname
import os, re
from snakemake.remote.HTTP import RemoteProvider as HTTPRemoteProvider
HTTP = HTTPRemoteProvider()


# https://github.com/dahak-metagenomics/dahak/tree/master/workflows/comparison


##################################################
# Comparison: default config

include: "comparison.settings"

data_dir = config['data_dir']
biocontainers = config['biocontainers']
taxclass = config['taxonomic_classification']
assembly = config['assembly']
readfilt = config['read_filtering']
comparison = config['comparison']


##################################################
# Comparison: build rules

# Skip to the very end of the file 
# to see the high-level build rules
# that trigger cascades of workflow
# tasks.


##################################################
# Comparison: compute signatures for reads

# see rule compute_read_signatures in taxonomic classification Snakefile


##################################################
# Comparison: compute signatures for assemblies


# input is assembly pattern (output of assembly workflow)
assembly_sig_input = join(data_dir, assembly['assembly_patterns']['assembly_pattern'])

# output replaces .contigs.fa with 'sig_suffix'
assembly_sig_output = re.sub(r'\.contigs\.fa',
                             comparison['compute_assembly_signatures'],
                             assembly['assembly_patterns']['assembly_pattern'])

# scale, for command line
assembly_sig_scale = "%s"%(comparison['compute_assembly_signatures']['scale'])

# likewise, get separate k values for assembly and read signatures
kvalues_cmd = ",".join([str(j) for j in comparison['compute_assembly_signatures']['kvalues']])

# k values for the filename are hard-coded by the user.

rule compute_assembly_signatures:
    """
    Compute assembly signatures using sourmash.
    """
    input:
        assembly_sig_input
    output:
        assembly_sig_output
    singularity:
        sourmash_image
    shell:
        'sourmash compute '
        '-k {kvalues_cmd} '
        '--scaled {scale} '
        '/{input} '
        '-o /{output} '


##################################################
# Comparison: compare signatures for reads

###for i in 21 31 51
###do
###
###     docker run -v ${PWD}:/data quay.io/biocontainers/sourmash:2.0.0a1--py35_2 sourmash \
###         compare /data/SRR606249.pe.trim2.fq.gz.k21_31_51.sig \
###         /data/SRR606249.pe.trim30.fq.gz.k21_31_51.sig \
###         /data/SRR606249_subset10.pe.trim2.fq.gz.k21_31_51.sig \
###         /data/SRR606249_subset10.pe.trim30.fq.gz.k21_31_51.sig \
###         /data/SRR606249_subset25.pe.trim2.fq.gz.k21_31_51.sig \
###         /data/SRR606249_subset25.pe.trim30.fq.gz.k21_31_51.sig \
###         /data/SRR606249_subset50.pe.trim2.fq.gz.k21_31_51.sig \
###         /data/SRR606249_subset50.pe.trim30.fq.gz.k21_31_51.sig \
###         -k ${i} \
###         --csv /data/SRR606249.pe.trim2and30_comparison.k${i}.csv
###done



##################################################
# Comparison: compare signatures for assemblies

###for i in 21 31 51
###do
### docker run -v ${PWD}:/data quay.io/biocontainers/sourmash:2.0.0a1--py35_2 sourmash \
###     compare /data/SRR606249_1.trim2.fq.gz_megahit_output.k21_31_51.sig \
###     /data/SRR606249_1.trim2.fq.gz_spades_output.k21_31_51.sig \
###     /data/SRR606249_1.trim30.fq.gz_megahit_output.k21_31_51.sig \
###     /data/SRR606249_1.trim30.fq.gz_spades_output.k21_31_51.sig \
###     /data/SRR606249_subset10_1.trim2.fq.gz_megahit_output.k21_31_51.sig \
###     /data/SRR606249_subset10_1.trim2.fq.gz_spades_output.k21_31_51.sig \
###     /data/SRR606249_subset10_1.trim30.fq.gz_megahit_output.k21_31_51.sig \
###     /data/SRR606249_subset25_1.trim2.fq.gz_spades_output.k21_31_51.sig \
###     /data/SRR606249_subset25_1.trim30.fq.gz_megahit_output.k21_31_51.sig \
###     /data/SRR606249_subset25_1.trim30.fq.gz_spades_output.k21_31_51.sig \
###     /data/SRR606249_subset50_1.trim2.fq.gz_megahit_output.k21_31_51.sig \
###     /data/SRR606249_subset50_1.trim2.fq.gz_spades_output.k21_31_51.sig \
###     /data/SRR606249_subset50_1.trim30.fq.gz_megahit_output.k21_31_51.sig \
###     /data/SRR606249_subset50_1.trim30.fq.gz_spades_output.k21_31_51.sig \
###     -k ${i} \
###     --csv /data/SRR606249.pe.trim2and30_megahitandspades_comparison.k${i}.csv
###done



##################################################
# Comparison: compare signatures for reads and assemblies

# long list will become input
# input variable will be expand()
# expand will use compare_assembly_signatures
# keys: base, quality, assembler
# etc

###for i in 21 31 51
###do
###        docker run -v ${PWD}:/data quay.io/biocontainers/sourmash:2.0.0a1--py35_2 \
###                sourmash compare \
###                /data/SRR606249_1.trim2.fq.gz_megahit_output.k21_31_51.sig \
###                /data/SRR606249_1.trim2.fq.gz_spades_output.k21_31_51.sig \
###                /data/SRR606249.pe.trim2.fq.gz.k21_31_51.sig \
###                /data/SRR606249.pe.trim30.fq.gz.k21_31_51.sig \
###                /data/SRR606249_1.trim30.fq.gz_megahit_output.k21_31_51.sig \
###                /data/SRR606249_1.trim30.fq.gz_spades_output.k21_31_51.sig \
###                -k ${i} \
###                --csv /data/SRR606249.pe.trim2and30_readstoassemblies_comparison.k${i}.csv
###done

