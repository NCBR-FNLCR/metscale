'''
Author: Phillip Brooks, Charles Reid
Affiliation: UC Davis Lab for Data Intensive Biology
Objective: Use sourmash to compute MinHash signatures and compare the Jaccard
similarity of MinHash signatures.
Date: 2018-06-14
Documentation: docs/workflow_comparison.md
'''

from utils import container_image_is_external, container_image_name
from os.path import join, isfile, dirname
import os, re
from snakemake.remote.HTTP import RemoteProvider as HTTPRemoteProvider
HTTP = HTTPRemoteProvider()


# https://github.com/dahak-metagenomics/dahak/tree/master/workflows/comparison


##################################################
# Comparison: default config

include: "comparison.settings"

data_dir = config['data_dir']
biocontainers = config['biocontainers']
taxclass = config['taxonomic_classification']
assembly = config['assembly']
readfilt = config['read_filtering']
comparison = config['comparison']


##################################################
# Comparison: build rules

# Skip to the very end of the file 
# to see the high-level build rules
# that trigger cascades of workflow
# tasks.


##################################################
# Comparison: compute signatures for reads

read_sig_inputs  = [join(data_dir, taxclass['reads']['fq_fwd']), 
                    join(data_dir, taxclass['reads']['fq_rev'])]

# output replaces .fq.gz with sig_suffix variable
read_fq_sig = re.sub('_1','',reads['fq_fwd'])
read_sig_output_name = re.sub(r'\.fq\.gz',
                              comparison['compute_read_signatures']['sig_suffix'],
                              read_fq_sig)
read_sig_output = join(data_dir, read_sig_output_name)

# scale, for command line
assembly_sig_scale = "%s"%(comparison['compute_assembly_signatures']['scale'])




# ---------
# old tax class:

read_sig_output   = join(data_dir, taxclass['compute_read_signatures']['sig_name'])
merge_output = join(data_dir, taxclass['compute_read_signatures']['merge_name'])

kvalues_cmd = ",".join([str(j) for j in taxclass['compute_read_signatures']['kvalues']])
kvalues_file = "_".join([str(j) for j in taxclass['compute_read_signatures']['kvalues']])
scale = "%s"%(taxclass['compute_read_signatures']['scale'])

sourmash_image = container_image_name(biocontainers, 'sourmash')

def compute_read_signatures_fq_fwd(wildcards):
    return taxclass['reads']['fq_fwd'].format(**wildcards)

def compute_read_signatures_fq_rev(wildcards):
    return taxclass['reads']['fq_rev'].format(**wildcards)

# add k values
def compute_read_signatures_sig_name(wildcards):
    return taxclass['compute_read_signatures']['sig_name'].format(**wildcards)

def compute_read_signatures_merge_name(wildcards):
    return taxclass['compute_read_signatures']['merge_name'].format(**wildcards)

rule compute_read_signatures:
    """
    Compute read signatures from trimmed data using sourmash.
    """
    input:
        read_sig_inputs
    output:
        read_sig_output
    singularity:
        sourmash_image
    params:
        fq_fwd = compute_read_signatures_fq_fwd,
        fq_rev = compute_read_signatures_fq_rev,
        read_sig_name = compute_read_signatures_sig_name,
        read_merge_name = compute_read_signatures_merge_name
    shell:
        'sourmash compute '
        '--merge /data/{params.merge_name} '
        '--track-abundance '
        '--scaled {scale} '
        '-k {kvalues_cmd} '
        '/{inputs[0]} '
        '/{inputs[1]} '
        '-o /data/{params.read_sig_name}'




##################################################
# Comparison: compute signatures for assemblies


# input is assembly pattern (output of assembly workflow)
assembly_sig_input = join(data_dir, assembly['assembly_patterns']['assembly_pattern'])

# output replaces .contigs.fa with sig_suffix variable
assembly_sig_output = re.sub(r'\.contigs\.fa',
                             comparison['compute_assembly_signatures'],
                             assembly['assembly_patterns']['assembly_pattern'])

# scale, for command line
assembly_sig_scale = "%s"%(comparison['compute_assembly_signatures']['scale'])

# likewise, get separate k values for assembly and read signatures
kvalues_cmd = ",".join([str(j) for j in comparison['compute_assembly_signatures']['kvalues']])

# k values for the filename are hard-coded by the user.

rule compute_assembly_signatures:
    """
    Compute assembly signatures using sourmash.
    """
    input:
        assembly_sig_input
    output:
        assembly_sig_output
    singularity:
        sourmash_image
    shell:
        'sourmash compute '
        '-k {kvalues_cmd} '
        '--scaled {scale} '
        '/{input} '
        '-o /{output} '


##################################################
# Comparison: compare signatures for reads


# We need to use expand() to create a list of 
# read signature files (the input files)
compare_read_sigs_input_names = expand(
        read_fq_sig,
        base = comparison['compare_read_signatures']['base'],
        quality = comparison['compare_read_signatures']['quality'])

# Turn filename X into data/X
compare_read_sigs_inputs = [join(data_dir,k) for k in compare_read_sigs_input_names]

def compare_read_sigs_inputs_wc(wildcards):
    """
    For each input file name, perform wildcard substitution, 
    add absolute container path, and join all the input file
    names together in a single string.
    """
    compare_input_names_wc = [x.format(**wildcards) for x in compare_read_sigs_inputs]
    compare_input_names_wc = ["/%s"%(x) for x in interleave_input_wc]
    compare_input_names_wc = " ".join(interleave_input_wc)
    return compare_input_names_wc

# User specifies CSV output file.
# This name is used verbatim.
compare_read_sigs_output_name = comparison['compare_read_assembly_signatures']['csv_out']
compare_read_sigs_output = join(data_dir, compare_read_sigs_output_name)

rule compare_read_signatures:
    """
    Compare signatures of specified reads.
    """
    input:
        compare_read_sigs_inputs
    output:
        compare_read_sigs_output
    singularity:
        sourmash_image
    params:
        compare_reads_input_wc = post_trimming_qa_output,
    shell:
        # TODO        


###for i in 21 31 51
###do
###
###     docker run -v ${PWD}:/data quay.io/biocontainers/sourmash:2.0.0a1--py35_2 sourmash \
###         compare /data/SRR606249.pe.trim2.fq.gz.k21_31_51.sig \
###         /data/SRR606249.pe.trim30.fq.gz.k21_31_51.sig \
###         /data/SRR606249_subset10.pe.trim2.fq.gz.k21_31_51.sig \
###         /data/SRR606249_subset10.pe.trim30.fq.gz.k21_31_51.sig \
###         /data/SRR606249_subset25.pe.trim2.fq.gz.k21_31_51.sig \
###         /data/SRR606249_subset25.pe.trim30.fq.gz.k21_31_51.sig \
###         /data/SRR606249_subset50.pe.trim2.fq.gz.k21_31_51.sig \
###         /data/SRR606249_subset50.pe.trim30.fq.gz.k21_31_51.sig \
###         -k ${i} \
###         --csv /data/SRR606249.pe.trim2and30_comparison.k${i}.csv
###done



##################################################
# Comparison: compare signatures for assemblies

###for i in 21 31 51
###do
### docker run -v ${PWD}:/data quay.io/biocontainers/sourmash:2.0.0a1--py35_2 sourmash \
###     compare /data/SRR606249_1.trim2.fq.gz_megahit_output.k21_31_51.sig \
###     /data/SRR606249_1.trim2.fq.gz_spades_output.k21_31_51.sig \
###     /data/SRR606249_1.trim30.fq.gz_megahit_output.k21_31_51.sig \
###     /data/SRR606249_1.trim30.fq.gz_spades_output.k21_31_51.sig \
###     /data/SRR606249_subset10_1.trim2.fq.gz_megahit_output.k21_31_51.sig \
###     /data/SRR606249_subset10_1.trim2.fq.gz_spades_output.k21_31_51.sig \
###     /data/SRR606249_subset10_1.trim30.fq.gz_megahit_output.k21_31_51.sig \
###     /data/SRR606249_subset25_1.trim2.fq.gz_spades_output.k21_31_51.sig \
###     /data/SRR606249_subset25_1.trim30.fq.gz_megahit_output.k21_31_51.sig \
###     /data/SRR606249_subset25_1.trim30.fq.gz_spades_output.k21_31_51.sig \
###     /data/SRR606249_subset50_1.trim2.fq.gz_megahit_output.k21_31_51.sig \
###     /data/SRR606249_subset50_1.trim2.fq.gz_spades_output.k21_31_51.sig \
###     /data/SRR606249_subset50_1.trim30.fq.gz_megahit_output.k21_31_51.sig \
###     /data/SRR606249_subset50_1.trim30.fq.gz_spades_output.k21_31_51.sig \
###     -k ${i} \
###     --csv /data/SRR606249.pe.trim2and30_megahitandspades_comparison.k${i}.csv
###done



##################################################
# Comparison: compare signatures for reads and assemblies

# long list will become input
# input variable will be expand()
# expand will use compare_assembly_signatures
# keys: base, quality, assembler
# etc

###for i in 21 31 51
###do
###        docker run -v ${PWD}:/data quay.io/biocontainers/sourmash:2.0.0a1--py35_2 \
###                sourmash compare \
###                /data/SRR606249_1.trim2.fq.gz_megahit_output.k21_31_51.sig \
###                /data/SRR606249_1.trim2.fq.gz_spades_output.k21_31_51.sig \
###                /data/SRR606249.pe.trim2.fq.gz.k21_31_51.sig \
###                /data/SRR606249.pe.trim30.fq.gz.k21_31_51.sig \
###                /data/SRR606249_1.trim30.fq.gz_megahit_output.k21_31_51.sig \
###                /data/SRR606249_1.trim30.fq.gz_spades_output.k21_31_51.sig \
###                -k ${i} \
###                --csv /data/SRR606249.pe.trim2and30_readstoassemblies_comparison.k${i}.csv
###done

